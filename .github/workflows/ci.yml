name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 scripts/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check formatting with black
      run: |
        black --check scripts/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only scripts/
    
    - name: Run brane dynamics simulation
      run: |
        python scripts/brane_dynamics.py
    
    - name: Run 1D oscillation prototype
      run: |
        mkdir -p plots
        python scripts/brane_oscillation_1d.py
    
    - name: Upload plots
      uses: actions/upload-artifact@v4
      with:
        name: simulation-plots
        path: plots/*.png
    
    - name: Check for syntax errors
      run: |
        python -m py_compile scripts/*.py

  build-site:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
    
    - name: Build Jekyll site
      run: |
        bundle install
        bundle exec jekyll build
    
    - name: Upload site artifact
      uses: actions/upload-artifact@v4
      with:
        name: jekyll-site
        path: _site/

  generate-pdf:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pypandoc pyyaml PyPDF2
        
    - name: Install pandoc and LaTeX
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc texlive-xetex texlive-fonts-recommended texlive-plain-generic texlive-latex-extra texlive-science fonts-dejavu-core fonts-dejavu-extra
    
    - name: Generate PDF
      run: |
        # Ensure output directory exists
        mkdir -p output
        # Clean old PDFs first
        rm -f output/*.pdf
        # Check available fonts
        fc-list | grep -i dejavu || echo "DejaVu fonts not found"
        # Run with verbose output
        python scripts/generate_pdf.py
        # Debug: Check what files were created
        echo "=== Checking output directory ==="
        ls -la output/
        echo "=== Checking root directory for PDF ==="
        ls -la *.pdf || echo "No PDFs in root"
    
    - name: Upload PDF
      uses: actions/upload-artifact@v4
      with:
        name: theory-pdf
        path: output/oscillating_brane_theory_latest.pdf
    
    - name: Commit and push PDF
      run: |
        # Copy PDF to root for website
        cp output/oscillating_brane_theory_latest.pdf oscillating_brane_theory_latest.pdf
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if PDF has changed
        if git diff --quiet oscillating_brane_theory_latest.pdf; then
          echo "PDF has not changed, skipping commit"
        else
          git add oscillating_brane_theory_latest.pdf
          git commit -m "Auto-update PDF with latest content [skip ci]"
          git push
        fi